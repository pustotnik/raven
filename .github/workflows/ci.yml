name: CI

on:
  push:
    branches:
      - master
  #pull_request:
  #  branches:
  #    - master

  schedule:
    - cron: '3 2 8 * *'

jobs:
  test:
    name: "test: ${{ matrix.os }}, python ${{ matrix.python }}"

    strategy:
      #max-parallel: 4
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-18.04, python: 3.5 }
          - { os: ubuntu-18.04, python: 3.6 }
          - { os: ubuntu-18.04, python: 3.7 }
          - { os: ubuntu-18.04, python: 3.8 }
          - { os: ubuntu-18.04, python: 3.9 }
          - { os: macos-10.15, python: 3.6 }
          - { os: windows-2019, python: 3.7 }

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    ########### cache

    - uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    ########## deps

    - name: Install dependency packages
      env:
        ACCEPT_EULA: Y
      #if: startsWith(matrix.os,'ubuntu')
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade --no-install-recommends --yes
          sudo apt-get install clang gcc build-essential bison nasm yasm
          sudo apt-get install gdc ldc libboost-all-dev lua5.1 libdbus-glib-1-dev
          sudo apt-get install gfortran libgtk-3-dev libsdl2-dev
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          export HOMEBREW_NO_AUTO_UPDATE=1
          brew install boost
          # deprecated
          #brew install boost-python
          brew install dmd
          brew install ldc
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          #choco install python --version "3.7.4"
          choco install boost-msvc-14.1 --version=1.67.0
          #choco install mingw
          #choco install ldc
        fi
      shell: bash

    - name: Install pip modules
      env:
        PYTHON_VER: ${{ matrix.python }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r dev-requirements.txt
        python -m pip install coveralls

        if [[ "$RUNNER_OS" == "Linux" ]] && [[ "$PYTHON_VER" == '3.8' ]]; then
          python -m pip install pyyaml
        fi
      shell: bash

    ########### tests

    - name: Prapare tests [Windows only]
      if: startsWith(runner.os, 'Windows')
      run: |
        Set-MpPreference -DisableArchiveScanning $true
        Set-MpPreference -DisableRealtimeMonitoring $true
        Set-MpPreference -DisableBehaviorMonitoring $true
      shell: powershell

    - name: Run tests
      run: |
        python -m pytest --cov zm tests -v -k "not zipapp" --maxfail=2
        RESULT=$?
        if [[ $RESULT -eq 0 ]]; then
          python -m pytest tests -v -k "zipapp" --maxfail=2
        else
          exit $RESULT
        fi
      shell: bash

    - name: Coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_PARALLEL: true
        COVERALLS_FLAG_NAME: ${{ matrix.os }}-py-${{ matrix.python }}
      run: coveralls --service=github
      shell: bash

  complete-coveralls:
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim

    steps:
    - name: Coveralls Finished
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install --upgrade coveralls
        coveralls --finish
