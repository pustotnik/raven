name: CI

on:
  push:
    branches:
      - master
  #pull_request:
  #  branches:
  #    - master

  schedule:
    - cron: '3 2 8 * *'

jobs:
  #ubuntu-bionic-tests:
  tests:

    strategy:
      matrix:
        #os: [ubuntu-latest, macos-latest, windows-latest]
        #os: [ubuntu-16.04, ubuntu-18.04]
        #os: [ubuntu-18.04, macos-10.15]
        #os: [ubuntu-18.04]
        #python-version: [3.5, 3.6, 3.7, 3.8, 3.9]

        #include:
        #  - os: macos-10.15
        #    python-version: [3.6]

        include:
          - { os: ubuntu-18.04, python: 3.5 }
          #- { os: ubuntu-18.04, python: 3.6 }
          - { os: macos-10.15, python: 3.6 }

    runs-on: ${{ matrix.os }}

    env:
      PYTHON_VER: ${{ matrix.python }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install dep packages
      #if: startsWith(matrix.os,'ubuntu')
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get install clang gcc build-essential bison nasm yasm
          sudo apt-get install gdc ldc libboost-all-dev lua5.1 libdbus-glib-1-dev
          sudo apt-get install gfortran libgtk-3-dev libsdl2-dev
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install boost
          brew install boost-python
          brew install dmd
          brew install ldc
        fi
    #- name: Install brew packages
    #  if: runner.os == 'macOS'
    #  run: |
    #    brew install boost
    #    brew install boost-python
    #    brew install dmd
    #    brew install ldc

    - name: Install pip modules
      run: |
        python -m pip install --upgrade pip
        pip install -r dev-requirements.txt
    - name: Run tests
      run: |
        python -m pytest --cov zm tests -v -k "not zipapp" --maxfail=2
        #RESULT=$?
        #if [[ $RESULT -eq 0 ]]; then
        #  python -m pytest tests -v -k "zipapp" --maxfail=2
        #else
        #  exit $RESULT
        #fi