name: CI

on:
  push:
    branches:
      - master
  pull_request:
  #  branches:
  #    - master
  workflow_dispatch: # manual trigger

  schedule:
    - cron: '3 2 8 * *'

jobs:
  test:
    name: "test: ${{ matrix.os }}, python ${{ matrix.python }}"

    strategy:
      #max-parallel: 4
      fail-fast: false
      matrix:
        include:
          #- { os: ubuntu-18.04, python: '3.5'  }
          #- { os: ubuntu-18.04, python: '3.6'  }
          #- { os: ubuntu-18.04, python: '3.7'  }
          #- { os: ubuntu-18.04, python: '3.8'  }
          #- { os: ubuntu-18.04, python: '3.9'  }
          #- { os: ubuntu-20.04, python: '3.10' }
          #- { os: macos-10.15,  python: '3.7'  }
          #- { os: windows-2019, python: '3.7'  }
          - { os: windows-2019, python: '3.8'  }

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    ########### cache

    - uses: actions/cache@v2
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/dev-requirements.txt', '**/requirements.txt') }}

    - uses: actions/cache@v2
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/dev-requirements.txt', '**/requirements.txt') }}

    - uses: actions/cache@v2
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('**/dev-requirements.txt', '**/requirements.txt') }}

    ########## deps

    - name: Install dependency packages
      #if: startsWith(matrix.os,'ubuntu')
      run: |
        if [[ $RUNNER_OS == "Linux" ]]; then
          sudo apt-get update
          sudo ACCEPT_EULA=Y DEBIAN_FRONTEND=noninteractive apt-get upgrade --no-install-recommends --yes
          PKGS=`cat tests/deb-deps.txt`
          sudo apt-get -y --no-install-recommends install $PKGS
        elif [[ $RUNNER_OS == "macOS" ]]; then
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          export HOMEBREW_NO_AUTO_UPDATE=1
          brew install boost
          # deprecated
          #brew install boost-python
          brew install dmd
          brew install ldc
        #elif [[ $RUNNER_OS == "Windows" ]]; then
        #  #choco install python --version "3.7.4"
        #  choco install boost-msvc-14.1 --version=1.67.0
        #  #choco install mingw
        #  #choco install ldc
        #  python -m pip install --upgrade pip
        #  python -m pip install --upgrade aqtinstall
        #  # there is no win64_msvc2019_64 for Qt 5.12.12
        #  aqt install-qt --outputdir C:\Qt windows desktop 5.15.2 win64_msvc2019_64
        #  aqt install-qt --outputdir C:\Qt windows desktop 5.15.2 win64_mingw81
        #  # aqt install-qt --outputdir C:\Qt windows desktop 5.12.12 win64_msvc2017_64
        fi
      shell: bash

    - name: Install pip modules
      env:
        PYTHON_VER: ${{ matrix.python }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r tests/requirements.txt
        python -m pip install coveralls

        if [[ $RUNNER_OS == "Linux" && $PYTHON_VER == '3.8' ]]; then
          python -m pip install pyyaml
        fi
      shell: bash

    ########### tests

    - name: Prapare tests [Windows only]
      if: startsWith(runner.os, 'Windows')
      run: |
        Set-MpPreference -DisableArchiveScanning $true
        Set-MpPreference -DisableRealtimeMonitoring $true
        Set-MpPreference -DisableBehaviorMonitoring $true
      shell: powershell

    - name: Run tests
      run: |
        #python -m pytest --cov zm tests -v -k "not zipapp" --maxfail=2
        pytest tests -svv -k "testConfigureAndBuild and not zipapp" --maxfail=2
        RESULT=$?
        if (( $RESULT == 0 )); then
          python -m pytest tests -v -k "zipapp" --maxfail=2
        else
          exit $RESULT
        fi
      shell: bash

    - name: Coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_PARALLEL: true
        COVERALLS_FLAG_NAME: ${{ matrix.os }}-py-${{ matrix.python }}
      run: coveralls --service=github
      shell: bash
      continue-on-error: true

  complete-coveralls:
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim

    steps:
    - name: Coveralls Finished
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install --upgrade coveralls
        coveralls --finish
      continue-on-error: true
